{"ast":null,"code":"var _jsxFileName = \"/Users/saarimkhan/Desktop/Box Office App/box-office/Box-office-app/src/pages/Show.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useReducer } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Cast from \"../components/show/Cast\";\n// import Details from \"../components/show/Details\";\n// import Seasons from \"../components/show/Seasons\";\n// import ShowMainData from \"../components/show/ShowMainData\";\n// import { apiGet } from \"../misc/config\";\n// import { InfoBlock, ShowPageWrapper } from \"./Show.style\";\n\n// const reducer = (prevState, action) => {\n//   switch (action.type) {\n//     case \"FETCH_SUCCESS\": {\n//       return { isLoading: false, error: null, show: action.show };\n//     }\n//     case \"FETCH_FAILED\": {\n//       return { ...prevState, isLoading: false, error: action.error };\n//     }\n\n//     default:\n//       return prevState;\n//   }\n// };\n\n// const intialState = {\n//   show: null,\n//   isLoading: true,\n//   error: null,\n// };\n\n// const Show = () => {\n//   const { id } = useParams();\n\n//   const [{ show, isLoading, error }, dispatch] = useReducer(\n//     reducer,\n//     intialState\n//   );\n\n//   useEffect(() => {\n//     let isMounted = true;\n\n//     apiGet(`/shows/${id}?embed[]=seasons&embed[]=cast`)\n//       .then((results) => {\n//         if (isMounted) {\n//           dispatch({ type: \"FETCH_SUCCESS\", show: results });\n//         }\n//       })\n//       .catch((err) => {\n//         if (isMounted) {\n//           dispatch({ type: \"FETCH_FAILED\", error: err.message });\n//         }\n//       });\n\n//     return () => {\n//       isMounted = false;\n//     };\n//   }, [id]);\n\n//   if (isLoading) {\n//     return <div>Data is being Loaded</div>;\n//   }\n//   if (error) {\n//     return <div>Error occured:{error}</div>;\n//   }\n\n//   return (\n//     <ShowPageWrapper>\n//       <ShowMainData\n//         image={show.image}\n//         name={show.name}\n//         rating={show.rating}\n//         summary={show.summary}\n//         tags={show.genres}\n//       />\n//       <InfoBlock>\n//         <h2>Details</h2>\n//         <Details\n//           status={show.status}\n//           network={show.network}\n//           premiered={show.premiered}\n//         />\n//       </InfoBlock>\n\n//       <InfoBlock>\n//         <h2>Seasons</h2>\n//         <Seasons seasons={show.embedded.seasons} />\n//       </InfoBlock>\n\n//       <div>\n//         <h2>Cast</h2>\n//         <Cast cast={show.embedded.cast} />\n//       </div>\n//     </ShowPageWrapper>\n//   );\n// };\n\n// export default Show;\n\nimport React, { useEffect, useReducer } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { apiGet } from \"../misc/config\";\nimport ShowMainData from \"../components/show/ShowMainData\";\nimport Details from \"../components/show/Details\";\nimport Seasons from \"../components/show/Seasons\";\nimport Cast from \"../components/show/Cast\";\nimport { ShowPageWrapper, InfoBlock } from \"./Show.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reducer = (prevState, action) => {\n  switch (action.type) {\n    case \"FETCH_SUCCESS\":\n      {\n        return {\n          isLoading: false,\n          error: null,\n          show: action.show\n        };\n      }\n    case \"FETCH_FAILED\":\n      {\n        return {\n          ...prevState,\n          isLoading: false,\n          error: action.error\n        };\n      }\n    default:\n      return prevState;\n  }\n};\nconst initialState = {\n  show: null,\n  isLoading: true,\n  error: null\n};\nconst Show = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [{\n    show,\n    isLoading,\n    error\n  }, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    let isMounted = true;\n    apiGet(`/shows/${id}?embed[]=seasons&embed[]=cast`).then(results => {\n      if (isMounted) {\n        dispatch({\n          type: \"FETCH_SUCCESS\",\n          show: results\n        });\n      }\n    }).catch(err => {\n      if (isMounted) {\n        dispatch({\n          type: \"FETCH_FAILED\",\n          error: err.message\n        });\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, [id]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Data is being loaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error occured: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ShowPageWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(ShowMainData, {\n      image: show.image,\n      name: show.name,\n      rating: show.rating,\n      summary: show.summary,\n      tags: show.genres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoBlock, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Details, {\n        status: show.status,\n        network: show.network,\n        premiered: show.premiered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoBlock, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Seasons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Seasons, {\n        seasons: show._embedded.seasons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoBlock, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Cast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Cast, {\n        cast: show._embedded.cast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(Show, \"nmAMxP9VIL71D5DR7tcQcgxdq2A=\", false, function () {\n  return [useParams];\n});\n_c = Show;\nexport default Show;\nvar _c;\n$RefreshReg$(_c, \"Show\");","map":{"version":3,"names":["React","useEffect","useReducer","useParams","apiGet","ShowMainData","Details","Seasons","Cast","ShowPageWrapper","InfoBlock","reducer","prevState","action","type","isLoading","error","show","initialState","Show","id","dispatch","isMounted","then","results","catch","err","message","image","name","rating","summary","genres","status","network","premiered","_embedded","seasons","cast"],"sources":["/Users/saarimkhan/Desktop/Box Office App/box-office/Box-office-app/src/pages/Show.js"],"sourcesContent":["// import React, { useEffect, useReducer } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Cast from \"../components/show/Cast\";\n// import Details from \"../components/show/Details\";\n// import Seasons from \"../components/show/Seasons\";\n// import ShowMainData from \"../components/show/ShowMainData\";\n// import { apiGet } from \"../misc/config\";\n// import { InfoBlock, ShowPageWrapper } from \"./Show.style\";\n\n// const reducer = (prevState, action) => {\n//   switch (action.type) {\n//     case \"FETCH_SUCCESS\": {\n//       return { isLoading: false, error: null, show: action.show };\n//     }\n//     case \"FETCH_FAILED\": {\n//       return { ...prevState, isLoading: false, error: action.error };\n//     }\n\n//     default:\n//       return prevState;\n//   }\n// };\n\n// const intialState = {\n//   show: null,\n//   isLoading: true,\n//   error: null,\n// };\n\n// const Show = () => {\n//   const { id } = useParams();\n\n//   const [{ show, isLoading, error }, dispatch] = useReducer(\n//     reducer,\n//     intialState\n//   );\n\n//   useEffect(() => {\n//     let isMounted = true;\n\n//     apiGet(`/shows/${id}?embed[]=seasons&embed[]=cast`)\n//       .then((results) => {\n//         if (isMounted) {\n//           dispatch({ type: \"FETCH_SUCCESS\", show: results });\n//         }\n//       })\n//       .catch((err) => {\n//         if (isMounted) {\n//           dispatch({ type: \"FETCH_FAILED\", error: err.message });\n//         }\n//       });\n\n//     return () => {\n//       isMounted = false;\n//     };\n//   }, [id]);\n\n//   if (isLoading) {\n//     return <div>Data is being Loaded</div>;\n//   }\n//   if (error) {\n//     return <div>Error occured:{error}</div>;\n//   }\n\n//   return (\n//     <ShowPageWrapper>\n//       <ShowMainData\n//         image={show.image}\n//         name={show.name}\n//         rating={show.rating}\n//         summary={show.summary}\n//         tags={show.genres}\n//       />\n//       <InfoBlock>\n//         <h2>Details</h2>\n//         <Details\n//           status={show.status}\n//           network={show.network}\n//           premiered={show.premiered}\n//         />\n//       </InfoBlock>\n\n//       <InfoBlock>\n//         <h2>Seasons</h2>\n//         <Seasons seasons={show.embedded.seasons} />\n//       </InfoBlock>\n\n//       <div>\n//         <h2>Cast</h2>\n//         <Cast cast={show.embedded.cast} />\n//       </div>\n//     </ShowPageWrapper>\n//   );\n// };\n\n// export default Show;\n\nimport React, { useEffect, useReducer } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { apiGet } from \"../misc/config\";\nimport ShowMainData from \"../components/show/ShowMainData\";\nimport Details from \"../components/show/Details\";\nimport Seasons from \"../components/show/Seasons\";\nimport Cast from \"../components/show/Cast\";\nimport { ShowPageWrapper, InfoBlock } from \"./Show.styled\";\n\nconst reducer = (prevState, action) => {\n  switch (action.type) {\n    case \"FETCH_SUCCESS\": {\n      return { isLoading: false, error: null, show: action.show };\n    }\n\n    case \"FETCH_FAILED\": {\n      return { ...prevState, isLoading: false, error: action.error };\n    }\n\n    default:\n      return prevState;\n  }\n};\n\nconst initialState = {\n  show: null,\n  isLoading: true,\n  error: null,\n};\n\nconst Show = () => {\n  const { id } = useParams();\n\n  const [{ show, isLoading, error }, dispatch] = useReducer(\n    reducer,\n    initialState\n  );\n\n  useEffect(() => {\n    let isMounted = true;\n\n    apiGet(`/shows/${id}?embed[]=seasons&embed[]=cast`)\n      .then((results) => {\n        if (isMounted) {\n          dispatch({ type: \"FETCH_SUCCESS\", show: results });\n        }\n      })\n      .catch((err) => {\n        if (isMounted) {\n          dispatch({ type: \"FETCH_FAILED\", error: err.message });\n        }\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [id]);\n\n  if (isLoading) {\n    return <div>Data is being loaded</div>;\n  }\n\n  if (error) {\n    return <div>Error occured: {error}</div>;\n  }\n\n  return (\n    <ShowPageWrapper>\n      <ShowMainData\n        image={show.image}\n        name={show.name}\n        rating={show.rating}\n        summary={show.summary}\n        tags={show.genres}\n      />\n\n      <InfoBlock>\n        <h2>Details</h2>\n        <Details\n          status={show.status}\n          network={show.network}\n          premiered={show.premiered}\n        />\n      </InfoBlock>\n\n      <InfoBlock>\n        <h2>Seasons</h2>\n        <Seasons seasons={show._embedded.seasons} />\n      </InfoBlock>\n\n      <InfoBlock>\n        <h2>Cast</h2>\n        <Cast cast={show._embedded.cast} />\n      </InfoBlock>\n    </ShowPageWrapper>\n  );\n};\n\nexport default Show;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}